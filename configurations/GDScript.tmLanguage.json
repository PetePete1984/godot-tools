{
  "fileTypes": [
    "gd"
  ],
  "scopeName": "source.gdscript",
  "name": "GDScript",
  "patterns": [
    { "include": "#base_expression" },
    { "include": "#self" },
    { "include": "#logic_op" },
    { "include": "#compare_op" },
    { "include": "#arithmetic_op" },
    { "include": "#assignment_op" },
    { "include": "#keywords" },
    { "include": "#const_def" },
    { "include": "#var_def" },
    { "include": "#class_def" },
    { "match": "\\b(?i:export|tool)\\b", "name": "storage.modifier.static.gdscript" },
    { "include": "#builtinFuncs" },
    {
      "match": "\\b([A-Za-z_]\\w*)\\b(?=\\s*(?:[(]))",
      "name": "support.function.any-method.gdscript"
    },
    {
      "match": "(?<=[^.]\\.)\\b([A-Za-z_]\\w*)\\b(?![(])",
      "name": "variable.other.property.gdscript"
    },
    { "include": "#function-declaration" },

    {
      "match": "(?<=extends)\\s+[a-zA-Z_][a-zA-Z_0-9]*(\\.([a-zA-Z_][a-zA-Z_0-9]*))?",
      "name": "entity.other.inherited-class.gdscript"
    },

    { "include": "#builtinClasses" },
    { "include": "#builtinProps" },
    { "include": "#builtinConsts" },
    { "include": "#const_vars" }
  ],
  "repository": {
    "comment": {
      "captures": {
        "1": {
          "name": "punctuation.definition.comment.number-sign.gdscript"
        }
      },
      "match": "(#).*$\\n?",
      "name": "comment.line.number-sign.gdscript"
    },
    "strings": {
      "patterns": [{
          "begin": "\"",
          "end": "(?<!\\\\)\"",
          "name": "string.quoted.double.gdscript"
        },
        {
          "begin": "'",
          "end": "(?<!\\\\)'",
          "name": "string.quoted.single.gdscript"
        },
        {
          "begin": "@\"",
          "end": "(?<!\\\\)\"",
          "name": "string.nodepath.gdscript"
        }
      ]
    },
    "self": {
      "match": "\\bself\\b",
      "name": "variable.language.gdscript"
    },
    "base_expression": {
      "patterns": [
        { "include": "#strings"},
        { "include": "#comment"},
        { "include": "#letter"},
        { "include": "#numbers"},
        { "include": "#line-continuation"}
      ]
    },
    "logic_op": {
      "match": "\\b(and|or|not)\\b",
      "name": "keyword.operator.logical.gdscript"
    },
    "compare_op": {
      "match": "<=|>=|==|<|>|!=",
      "name": "keyword.operator.comparison.gdscript"
    },
    "arithmetic_op": {
      "match": "\\+=|-=|\\*=|/=|%=|&=|\\|=|\\*|/|%|\\+|-|<<|>>|&|\\||\\^|~",
      "name": "keyword.operator.arithmetic.gdscript"
    },
    "assignment_op": {
      "match": "=",
      "name": "keyword.operator.assignment.gdscript"
    },

    "keywords": {
      "match": "\\b(?i:elif|else|for|if|while|break|continue|pass|in|is|return|onready|setget|enum|match|breakpoint|tool|extends|signal|class)\\b",
      "name": "keyword.control.gdscript"
    },
    "letter": {
        "match": "\\b(?i:true|false|null)\\b",
        "name": "constant.language.gdscript"
    },
    "numbers": {
      "patterns": [{
          "match": "\\b(?i:0x\\h*)\\b",
          "name": "constant.numeric.integer.hexadecimal.gdscript"
        },
        {
          "match": "\\b(?i:(\\d+\\.\\d*(e[\\-\\+]?\\d+)?))\\b",
          "name": "constant.numeric.float.gdscript"
        },
        {
          "match": "\\b(?i:(\\.\\d+(e[\\-\\+]?\\d+)?))\\b",
          "name": "constant.numeric.float.gdscript"
        },
        {
          "match": "\\b(?i:(\\d+e[\\-\\+]?\\d+))\\b",
          "name": "constant.numeric.float.gdscript"
        },
        {
          "match": "\\b\\d+\\b",
          "name": "constant.numeric.integer.gdscript"
        }
      ]
    },
    "const_def": {
      "match": "\\b(?i:(const))\\s+([a-zA-Z_][a-zA-Z_0-9]*)",
      "captures": {
        "1": { "name": "storage.type.const.gdscript" },
        "2": { "name": "constant.other.gdscript" }
      }
    },
    "var_def": {
      "match": "\\b(?i:(var))\\s+([a-zA-Z_][a-zA-Z_0-9]*)",
      "captures": {
        "1": { "name": "storage.type.var.gdscript" },
        "2": { "name": "support.member.gdscript" }
      }
    },
    "class_def": {
      "captures": {
        "1": { "name": "entity.name.type.class.gdscript" },
        "2": { "name": "class.other.gdscript" }
      },
      "match": "(?<=^class)\\s+([a-zA-Z_]\\w*)\\s*(?=:)"
    },
    "builtin_func": {
      "match": "(?<![^.]\\.|:)\\b(sin|cos|tan|sinh|cosh|tanh|asin|acos|atan|atan2|sqrt|fmod|fposmod|floor|ceil|round|abs|sign|pow|log|exp|is_nan|is_inf|ease|decimals|stepify|lerp|dectime|randomize|randi|randf|rand_range|seed|rand_seed|deg2rad|rad2deg|linear2db|db2linear|max|min|clamp|nearest_po2|weakref|funcref|convert|typeof|type_exists|char|str|print|printt|prints|printerr|printraw|var2str|str2var|var2bytes|bytes2var|range|load|inst2dict|dict2inst|hash|Color8|print_stack|instance_from_id|preload|yield|assert)\\b(?=(\\()([^)]*)(\\)))",
      "name": "support.function.builtin.gdscript"
    },
    "builtinClasses": {
      "match": "(?<![^.]\\.|:)\\b(Vector2|Vector3|Color|Rect2|Array|Basis|Dictionary|Plane|Quat|RID|Rect3|Transform|Transform2D)\\b",
      "name": "support.class.library.gdscript"
    },
    "const_vars": {
      "match": "\\b([A-Z_0-9]+)\\b",
      "name": "constant.other.gdscript"
    },

    "function-declaration": {
      "name": "meta.function.gdscript",
      "begin": "(?x)\n  \\s*\n  (?:\\b(static) \\s+)? \\b(func|signal)\\s+\n    (?=\n      [[:alpha:]_][[:word:]]* \\s* \\(\n    )\n",
      "end": "(:|(?=[#'\"\\n]))",
      "beginCaptures": {
        "1": { "name": "storage.modifier.static.gdscript" },
        "2": { "name": "storage.type.function.gdscript" }
      },
      "endCaptures": {
        "1": { "name": "punctuation.section.function.begin.gdscript" }
      },
      "patterns": [
        { "include": "#function-def-name" },
        { "include": "#parameters" },
        { "include": "#line-continuation" },
        { "include": "#return-annotation" }
      ]
    },
    "function-def-name": {
      "patterns": [
        {
          "name": "entity.name.function.gdscript",
          "match": "(?x)\n  \\b ([[:alpha:]_]\\w*) \\b\n"
        }
      ]
    },
    "parameters": {
      "name": "meta.function.parameters.gdscript",
      "begin": "(\\()",
      "end": "(\\))",
      "beginCaptures": {
        "1": { "name": "punctuation.definition.parameters.begin.gdscript" }
      },
      "endCaptures": {
        "1": { "name": "punctuation.definition.parameters.end.gdscript" }
      },
      "patterns": [{
          "name": "keyword.operator.unpacking.parameter.gdscript",
          "match": "(\\*\\*|\\*)"
        },
        { "include": "#parameter-special" },
        {
          "match": "(?x)\n  ([[:alpha:]_]\\w*)\n    \\s* (?: (,) | (?=[)#\\n=]))\n",
          "captures": {
            "1": { "name": "variable.parameter.function.language.gdscript" },
            "2": { "name": "punctuation.separator.parameters.gdscript" }
          }
        },
        { "include": "#comment" },
        { "include": "#loose-default"},
        { "include": "#annotated-parameter" }
      ]
    },
    "parameter-special": {
      "match": "(?x)\n  \\b ((self)|(cls)) \\b \\s*(?:(,)|(?=\\)))\n",
      "captures": {
        "1": { "name": "variable.parameter.function.language.gdscript" },
        "2": { "name": "variable.parameter.function.language.special.self.gdscript" },
        "3": { "name": "variable.parameter.function.language.special.cls.gdscript" },
        "4": { "name": "punctuation.separator.parameters.gdscript" }
      }
    },
    "loose-default": {
      "begin": "(=)",
      "end": "(,)|(?=\\))",
      "beginCaptures": {
        "1": { "name": "keyword.operator.gdscript" }
      },
      "endCaptures": {
        "1": { "name": "punctuation.separator.parameters.gdscript" }
      },
      "patterns": [
          { "include": "#base_expression"}
      ]
    },
    "annotated-parameter": {
      "begin": "(?x)\n  \\b\n  ([[:alpha:]_]\\w*) \\s* (:)\n",
      "end": "(,)|(?=\\))",
      "beginCaptures": {
        "1": { "name": "variable.parameter.function.language.gdscript" },
        "2": { "name": "punctuation.separator.annotation.gdscript" }
      },
      "endCaptures": {
        "1": { "name": "punctuation.separator.parameters.gdscript" }
      },
      "patterns": [
        { "name": "keyword.operator.assignment.gdscript", "match": "=(?!=)"}
      ]
    },
    "line-continuation": {
      "patterns": [
        {
          "match": "(\\\\)\\s*(\\S.*$\\n?)",
          "captures": {
            "1": { "name": "punctuation.separator.continuation.line.gdscript" },
            "2": { "name": "invalid.illegal.line.continuation.gdscript" }
          }
        },
        {
          "begin": "(\\\\)\\s*$\\n?",
          "end": "(?x)\n  (?=^\\s*$)\n  |\n  (?! (\\s* [rR]? (\\'\\'\\'|\\\"\\\"\\\"|\\'|\\\"))\n      |\n      (\\G $)  (?# '\\G' is necessary for ST)\n  )\n",
          "beginCaptures": {
            "1": { "name": "punctuation.separator.continuation.line.gdscript" }
          },
          "patterns": [
            { "include": "#base_expression" }
          ]
        }
      ]
    }
  }
}
